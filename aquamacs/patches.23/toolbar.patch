*** ../emacs.temp/src/nsmenu.m	2009-01-02 13:59:45.000000000 +1300
--- src/nsmenu.m	2009-01-02 13:59:47.000000000 +1300
***************
*** 71,76 ****
--- 71,78 ----
  /* Nonzero means a menu is currently active.  */
  static int popup_activated_flag;
  
+ Lisp_Object Vns_tool_bar_display_mode;
+ 
  /* NOTE: toolbar implementation is at end,
    following complete menu implementation. */
  
***************
*** 1187,1193 ****
--- 1189,1197 ----
        struct image *img;
        Lisp_Object image;
        Lisp_Object helpObj;
+       Lisp_Object captionObj;
        char *helpText;
+       char *captionText;
  
        /* If image is a vector, choose the image according to the
  	 button state.  */
***************
*** 1225,1232 ****
          helpObj = TOOLPROP (TOOL_BAR_ITEM_CAPTION);
        helpText = NILP (helpObj) ? "" : (char *)SDATA (helpObj);
  
        [toolbar addDisplayItemWithImage: img->pixmap idx: i helpText: helpText
!                                enabled: enabled_p];
  #undef TOOLPROP
      }
  
--- 1229,1239 ----
          helpObj = TOOLPROP (TOOL_BAR_ITEM_CAPTION);
        helpText = NILP (helpObj) ? "" : (char *)SDATA (helpObj);
  
+       captionObj = TOOLPROP (TOOL_BAR_ITEM_CAPTION);
+       captionText = NILP (captionObj) ? "" : (char *)SDATA (captionObj);
+ 
        [toolbar addDisplayItemWithImage: img->pixmap idx: i helpText: helpText
! 	       enabled: enabled_p  label: captionText];
  #undef TOOLPROP
      }
  
***************
*** 1270,1276 ****
  {
    self = [super initWithIdentifier: identifier];
    emacsView = view;
!   [self setDisplayMode: NSToolbarDisplayModeIconOnly];
    [self setSizeMode: NSToolbarSizeModeSmall];
    [self setDelegate: self];
    identifierToItem = [[NSMutableDictionary alloc] initWithCapacity: 10];
--- 1277,1283 ----
  {
    self = [super initWithIdentifier: identifier];
    emacsView = view;
!   [self setDisplayMode: NSToolbarDisplayModeDefault];
    [self setSizeMode: NSToolbarSizeModeSmall];
    [self setDelegate: self];
    identifierToItem = [[NSMutableDictionary alloc] initWithCapacity: 10];
***************
*** 1294,1299 ****
--- 1301,1320 ----
    [activeIdentifiers removeAllObjects];
    prevEnablement = enablement;
    enablement = 0L;
+ 
+   if (EQ (Vns_tool_bar_display_mode, intern ("labels")))
+     {
+       [self setDisplayMode: NSToolbarDisplayModeIconAndLabel];
+     }
+   else if (EQ (Vns_tool_bar_display_mode, intern ("icons")))
+     {
+       [self setDisplayMode: NSToolbarDisplayModeIconOnly];
+     }
+   else
+     {
+       [self setDisplayMode: NSToolbarDisplayModeDefault];
+     } 
+   printf("clearActive\n");
  }
  
  - (BOOL) changed
***************
*** 1304,1314 ****
  
  - (void) addDisplayItemWithImage: (EmacsImage *)img idx: (int)idx
                          helpText: (char *)help enabled: (BOOL)enabled
  {
!   /* 1) come up w/identifier */
!   NSString *identifier
!       = [NSString stringWithFormat: @"%u", [img hash]];
  
    /* 2) create / reuse item */
    NSToolbarItem *item = [identifierToItem objectForKey: identifier];
    if (item == nil)
--- 1325,1345 ----
  
  - (void) addDisplayItemWithImage: (EmacsImage *)img idx: (int)idx
                          helpText: (char *)help enabled: (BOOL)enabled
+ 			   label: (char *)label
  {
!   /* 1) come up w/ identifier */
!   NSString *identifier;
  
+   if (strcmp (label,  "--" ) == 0)
+     {
+       identifier = NSToolbarFlexibleSpaceItemIdentifier;
+       label = "";
+     } 
+   else 
+     {
+       identifier = [NSString stringWithFormat: @"%u", [img hash]];
+     }
+   
    /* 2) create / reuse item */
    NSToolbarItem *item = [identifierToItem objectForKey: identifier];
    if (item == nil)
***************
*** 1317,1322 ****
--- 1348,1354 ----
                 autorelease];
        [item setImage: img];
        [item setToolTip: [NSString stringWithCString: help]];
+       [item setLabel: [NSString stringWithCString: label]];
        [item setTarget: emacsView];
        [item setAction: @selector (toolbarClicked:)];
      }
***************
*** 1874,1879 ****
--- 1906,1912 ----
  
     ========================================================================== */
  
+ 
  DEFUN ("ns-reset-menu", Fns_reset_menu, Sns_reset_menu, 0, 0, 0,
         doc: /* Cause the NS menu to be re-calculated.  */)
       ()
***************
*** 1968,1973 ****
--- 2001,2018 ----
  void
  syms_of_nsmenu ()
  {
+ 
+ 
+   DEFVAR_LISP ("ns-tool-bar-display-mode", &Vns_tool_bar_display_mode,
+      doc: /* *Specify whether to display the tool bar as icons with labels.
+ The value can be `icons' (for icons only), `labels' (for icons with labels)
+ and nil, in which case the system default is assumed.
+ The default is nil.  */);
+ 
+   Vns_tool_bar_display_mode = Qnil;
+ 
+ 
+ 
    defsubr (&Sx_popup_menu);
    defsubr (&Sx_popup_dialog);
    defsubr (&Sns_reset_menu);
*** ../emacs.temp/lisp/tool-bar.el	2009-01-02 13:59:36.000000000 +1300
--- lisp/tool-bar.el	2009-01-02 13:59:47.000000000 +1300
***************
*** 127,132 ****
--- 127,203 ----
  	      bind))
  	  tool-bar-map))
  
+ (defun tool-bar-set-file-extension (image-spec-list extension)
+   "Set new file extensions for all :file properties
+ Replace any extensions of :file properties in elements of
+ IMAGE-SPEC-LIST. An extension may start with a period . or an
+ underscore. EXTENSION and the original file name extension (starting
+ with a period) are added to the file name.
+ 
+ E.g. foo_dis.xpm becomes foo_sel.xpm if EXTENSION is '_sel'."
+   (mapcar
+    (lambda (spec) 
+      (let ((f (plist-get spec :file)) 
+ 	    )
+         (if (null f)
+ 	    spec
+ 	  ;; need to replace previous extensions, including those
+ 	  ;; starting with _ - 
+ 	  (plist-put spec :file (concat (replace-regexp-in-string "[\.\_].*$" 
+ 								  "" f)
+ 					extension 
+ 					(file-name-extension f t)))
+ 	  )))
+    image-spec-list))
+ 
+ (defun tool-bar-get-image-spec (icon)
+   (let* ((fg (face-attribute 'tool-bar :foreground))
+ 	 (bg (face-attribute 'tool-bar :background))
+ 	 (colors (nconc (if (eq fg 'unspecified) nil (list :foreground fg))
+ 			(if (eq bg 'unspecified) nil (list :background bg))))
+ 	 (xpm-spec (list :type 'xpm :file (concat icon ".xpm")))
+ 	 (xpm-lo-spec (if (> (display-color-cells) 256)
+ 			  nil
+ 			(list :type 'xpm :file
+                               (concat "low-color/" icon ".xpm"))))
+ 	 (png-spec (if (image-type-available-p 'png)
+ 		       (list :type 'png :file (concat icon ".png") 
+ 			     :background "grey")))
+ 	 (pbm-spec (append (list :type 'pbm :file
+                                  (concat icon ".pbm")) colors))
+ 	 (xbm-spec (append (list :type 'xbm :file
+                                  (concat icon ".xbm")) colors))
+ 	 (image (find-image
+ 		(if (display-color-p)
+ 		    (list png-spec xpm-lo-spec xpm-spec pbm-spec xbm-spec)
+ 		  (list pbm-spec xbm-spec xpm-lo-spec xpm-spec))))
+ 	 (image-sel (find-image
+ 		     (if (display-color-p)
+ 			 (tool-bar-set-file-extension
+ 			  (list png-spec xpm-lo-spec xpm-spec pbm-spec xbm-spec)
+ 			  "_sel")
+ 		       nil)))
+ 	 (image-dis (find-image
+ 		     (if (display-color-p)
+ 			 (tool-bar-set-file-extension
+ 			  (list png-spec xpm-lo-spec xpm-spec pbm-spec xbm-spec)
+ 			  "_dis")
+ 		       nil)))
+ 	 (images (when image ;; image may be nil if not found.
+ 		    (unless (image-mask-p image)
+  		     (setq image (append image '(:mask heuristic))))
+ 		   (if (and image-sel image-dis)
+ 		       (progn		     
+ 			 (unless (image-mask-p image-sel)
+ 			   (setq image-sel (append image-sel 
+ 						   '(:mask heuristic))))
+ 			 (unless (image-mask-p image-dis)
+ 			   (setq image-dis (append image-dis 
+ 						   '(:mask heuristic))))
+ 			 (vector image-sel image image-dis image-dis))
+ 		     image)))) 
+     (cons image images)))
+ 
  ;;;###autoload
  (defun tool-bar-add-item (icon def key &rest props)
    "Add an item to the tool bar.
***************
*** 147,181 ****
  ;;;###autoload
  (defun tool-bar-local-item (icon def key map &rest props)
    "Add an item to the tool bar in map MAP.
! ICON names the image, DEF is the key definition and KEY is a symbol
! for the fake function key in the menu keymap.  Remaining arguments
! PROPS are additional items to add to the menu item specification.  See
! Info node `(elisp)Tool Bar'.  Items are added from left to right.
! 
! ICON is the base name of a file containing the image to use.  The
! function will first try to use low-color/ICON.xpm if `display-color-cells'
! is less or equal to 256, then ICON.xpm, then ICON.pbm, and finally
! ICON.xbm, using `find-image'."
!   (let* ((fg (face-attribute 'tool-bar :foreground))
! 	 (bg (face-attribute 'tool-bar :background))
! 	 (colors (nconc (if (eq fg 'unspecified) nil (list :foreground fg))
! 			(if (eq bg 'unspecified) nil (list :background bg))))
! 	 (xpm-spec (list :type 'xpm :file (concat icon ".xpm")))
! 	 (xpm-lo-spec (list :type 'xpm :file
! 			    (concat "low-color/" icon ".xpm")))
! 	 (pbm-spec (append (list :type 'pbm :file
!                                  (concat icon ".pbm")) colors))
! 	 (xbm-spec (append (list :type 'xbm :file
!                                  (concat icon ".xbm")) colors))
! 	 (image-exp `(find-image
! 		      (cond ((not (display-color-p))
! 			     ',(list pbm-spec xbm-spec xpm-lo-spec xpm-spec))
! 			    ((< (display-color-cells) 256)
! 			     ',(list xpm-lo-spec xpm-spec pbm-spec xbm-spec))
! 			    (t
! 			     ',(list xpm-spec pbm-spec xbm-spec))))))
!     (define-key-after map (vector key)
!       `(menu-item ,(symbol-name key) ,def :image ,image-exp ,@props))))
  
  ;;;###autoload
  (defun tool-bar-add-item-from-menu (command icon &optional map &rest props)
--- 218,245 ----
  ;;;###autoload
  (defun tool-bar-local-item (icon def key map &rest props)
    "Add an item to the tool bar in map MAP.
! ICON names the image, or is structure of the form (IMG . LABEL),
! with the image name IMG, and a string with the label of the icon
! displayed in the tool-bar as LABEL. LABEL defaults to the symbol
! name of KEY.  DEF is the key definition and KEY is a symbol for
! the fake function key in the menu keymap Remaining arguments
! PROPS are additional items to add to the menu item specification.
! See Info node `(elisp)Tool Bar'. Items are added from left to
! right.
! 
! ICON or IMG is the base name of a file containing the image to
! use. The function will first try to use low-color/ICON.xpm if
! display-color-cells is less or equal to 256, then ICON.xpm, then
! ICON.pbm, and finally ICON.xbm, using `find-image'."
!   (let* ((icon-name (if (consp icon) (car icon) icon))
! 	 (label (if (consp icon) (cdr icon) ""))
! 	 (is (tool-bar-get-image-spec icon-name))
! 	 (image (car is))
! 	 (images (cdr is))) 
!       (when (and (display-images-p) image)
!         (define-key-after map (vector key)
! 	`(menu-item ,label 
! 		    ,def :image ,images ,@props)))))
  
  ;;;###autoload
  (defun tool-bar-add-item-from-menu (command icon &optional map &rest props)
***************
*** 196,231 ****
  ;;;###autoload
  (defun tool-bar-local-item-from-menu (command icon in-map &optional from-map &rest props)
    "Define local tool bar binding for COMMAND using the given ICON.
! This makes a binding for COMMAND in IN-MAP, copying its binding from
! the menu bar in FROM-MAP (which defaults to `global-map'), but
! modifies the binding by adding an image specification for ICON.  It
! finds ICON just like `tool-bar-add-item'.  PROPS are additional
  properties to add to the binding.
  
  FROM-MAP must contain appropriate binding for `[menu-bar]' which
  holds a keymap."
    (unless from-map
      (setq from-map global-map))
!   (let* ((menu-bar-map (lookup-key from-map [menu-bar]))
! 	 (keys (where-is-internal command menu-bar-map))
! 	 (fg (face-attribute 'tool-bar :foreground))
! 	 (bg (face-attribute 'tool-bar :background))
! 	 (colors (nconc (if (eq fg 'unspecified) nil (list :foreground fg))
! 			(if (eq bg 'unspecified) nil (list :background bg))))
! 	 (xpm-spec (list :type 'xpm :file (concat icon ".xpm")))
! 	 (xpm-lo-spec (list :type 'xpm :file
! 			    (concat "low-color/" icon ".xpm")))
! 	 (pbm-spec (append (list :type 'pbm :file
!                                  (concat icon ".pbm")) colors))
! 	 (xbm-spec (append (list :type 'xbm :file
!                                  (concat icon ".xbm")) colors))
! 	 (image-exp `(find-image
! 		      (cond ((not (display-color-p))
! 			     ',(list pbm-spec xbm-spec xpm-lo-spec xpm-spec))
! 			    ((< (display-color-cells) 256)
! 			     ',(list xpm-lo-spec xpm-spec pbm-spec xbm-spec))
! 			    (t
! 			     ',(list xpm-spec pbm-spec xbm-spec)))))
  	 submap key)
      ;; We'll pick up the last valid entry in the list of keys if
      ;; there's more than one.
--- 260,285 ----
  ;;;###autoload
  (defun tool-bar-local-item-from-menu (command icon in-map &optional from-map &rest props)
    "Define local tool bar binding for COMMAND using the given ICON.
! ICON names the image, or is structure of the form (IMG . LABEL),
! with the image name IMG, and a string with the label of the icon
! displyed in the tool-bar as LABEL. This function creates a
! binding for COMMAND in IN-MAP, copying its binding from the menu
! bar in FROM-MAP (which defaults to `global-map'), but modifies
! the binding by adding an image specification for ICON. It finds
! ICON just like `tool-bar-add-item'. PROPS are additional
  properties to add to the binding.
  
  FROM-MAP must contain appropriate binding for `[menu-bar]' which
  holds a keymap."
    (unless from-map
      (setq from-map global-map))
!   (let* ((icon-name (if (consp icon) (car icon) icon))
! 	 (label (if (consp icon) (cdr icon)))
! 	 (menu-bar-map (lookup-key from-map [menu-bar]))
!   	 (keys (where-is-internal command menu-bar-map))
! 	 (is (tool-bar-get-image-spec icon-name))
! 	 (image (car is))
! 	 (images (cdr is)) 
  	 submap key)
      ;; We'll pick up the last valid entry in the list of keys if
      ;; there's more than one.
***************
*** 247,253 ****
      (let ((defn (assq key (cdr submap))))
        (if (eq (cadr defn) 'menu-item)
            (define-key-after in-map (vector key)
!             (append (cdr defn) (list :image image-exp) props))
          (setq defn (cdr defn))
          (define-key-after in-map (vector key)
            (let ((rest (cdr defn)))
--- 301,308 ----
      (let ((defn (assq key (cdr submap))))
        (if (eq (cadr defn) 'menu-item)
            (define-key-after in-map (vector key)
! 	      (append `(menu-item ,(or label (car (cddr defn)))) (cdddr defn) 
! 		      (list :image image) props))
          (setq defn (cdr defn))
          (define-key-after in-map (vector key)
            (let ((rest (cdr defn)))
***************
*** 255,262 ****
              ;; with a list of menu cache info, get rid of that.
              (if (and (consp rest) (consp (car rest)))
                  (setq rest (cdr rest)))
!             (append `(menu-item ,(car defn) ,rest)
!                     (list :image image-exp) props)))))))
  
  ;;; Set up some global items.  Additions/deletions up for grabs.
  
--- 310,317 ----
              ;; with a list of menu cache info, get rid of that.
              (if (and (consp rest) (consp (car rest)))
                  (setq rest (cdr rest)))
! 	      (append `(menu-item ,(or label (car defn)) ,rest)
!                     (list :image image) props)))))))
  
  ;;; Set up some global items.  Additions/deletions up for grabs.
  
***************
*** 264,279 ****
    ;; People say it's bad to have EXIT on the tool bar, since users
    ;; might inadvertently click that button.
    ;;(tool-bar-add-item-from-menu 'save-buffers-kill-emacs "exit")
!   (tool-bar-add-item-from-menu 'find-file "new")
!   (tool-bar-add-item-from-menu 'menu-find-file-existing "open")
!   (tool-bar-add-item-from-menu 'dired "diropen")
!   (tool-bar-add-item-from-menu 'kill-this-buffer "close")
!   (tool-bar-add-item-from-menu 'save-buffer "save" nil
  			       :visible '(or buffer-file-name
  					     (not (eq 'special
  						      (get major-mode
  							   'mode-class)))))
!   (tool-bar-add-item-from-menu 'write-file "saveas" nil
  			       :visible '(or buffer-file-name
  					     (not (eq 'special
  						      (get major-mode
--- 319,334 ----
    ;; People say it's bad to have EXIT on the tool bar, since users
    ;; might inadvertently click that button.
    ;;(tool-bar-add-item-from-menu 'save-buffers-kill-emacs "exit")
!   (tool-bar-add-item-from-menu 'find-file '("new" . "New"))
!   (tool-bar-add-item-from-menu 'menu-find-file-existing '("open" . "Open"))
!   (tool-bar-add-item-from-menu 'dired '("diropen" . "Directory"))
!     (tool-bar-add-item-from-menu 'kill-this-buffer "close")
!   (tool-bar-add-item-from-menu 'save-buffer '("save" . "Save") nil
  			       :visible '(or buffer-file-name
  					     (not (eq 'special
  						      (get major-mode
  							   'mode-class)))))
!   (tool-bar-add-item-from-menu 'write-file '("saveas" . "Save As") nil
  			       :visible '(or buffer-file-name
  					     (not (eq 'special
  						      (get major-mode
***************
*** 305,314 ****
    ;; we must explicitly operate on the default value.
  
    (let ((tool-bar-map (default-value 'tool-bar-map)))
!     (tool-bar-add-item "preferences" 'customize 'customize
  		       :help "Edit preferences (customize)")
  
!     (tool-bar-add-item "help" (lambda ()
  				(interactive)
  				(popup-menu menu-bar-help-menu))
  		       'help
--- 360,369 ----
    ;; we must explicitly operate on the default value.
  
    (let ((tool-bar-map (default-value 'tool-bar-map)))
!     (tool-bar-add-item '("preferences" . "Customize") 'customize 'customize
  		       :help "Edit preferences (customize)")
  
!     (tool-bar-add-item '("help" . "Help") (lambda ()
  				(interactive)
  				(popup-menu menu-bar-help-menu))
  		       'help
