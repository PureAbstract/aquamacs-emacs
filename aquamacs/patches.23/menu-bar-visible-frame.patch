Index: menu-bar.el
===================================================================
RCS file: /sources/emacs/emacs/lisp/menu-bar.el,v
retrieving revision 1.347
diff -c -r1.347 menu-bar.el
*** lisp/menu-bar.el	3 Dec 2008 05:48:29 -0000	1.347
--- lisp/menu-bar.el	29 Dec 2008 03:52:26 -0000
***************
*** 74,79 ****
--- 74,97 ----
  (defvar uniquify-buffer-name-style)
  
  
+ 
+ (defun menu-bar-menu-frame-live-and-visible-p ()
+   "Return non-nil if the menu frame is alive and visible.
+ The menu frame is the frame for which we are updating the menu."
+   (let ((menu-frame (or menu-updating-frame (selected-frame))))
+     (and (frame-live-p menu-frame)
+ 	 ;; not icon
+ 	 (eq (frame-visible-p menu-frame) t))))
+ 
+ (defun menu-bar-non-minibuffer-window-p ()
+   "Return non-nil if selected window of the menu frame is not a minibuf window.
+ 
+ See the documentation of `menu-bar-menu-frame-live-and-visible-p'
+ for the definition of the menu frame."
+   (let ((menu-frame (or menu-updating-frame (selected-frame))))
+     (not (window-minibuffer-p (frame-selected-window menu-frame)))))
+ 
+ 
  ;; The "File" menu items
  (define-key menu-bar-file-menu [exit-emacs]
    '(menu-item "Exit Emacs" save-buffers-kill-emacs
***************
*** 161,166 ****
--- 179,185 ----
    '(menu-item "Save" save-buffer
  	      :enable (and (buffer-modified-p)
  			   (buffer-file-name)
+ 			   (menu-bar-menu-frame-live-and-visible-p)
  			   (menu-bar-non-minibuffer-window-p))
  	      :help "Save current buffer to its file"))
  
***************
*** 184,194 ****
  	      :help "Discard (kill) current buffer"))
  (define-key menu-bar-file-menu [insert-file]
    '(menu-item "Insert File..." insert-file
! 	      :enable (menu-bar-non-minibuffer-window-p)
  	      :help "Insert another file into current buffer"))
  (define-key menu-bar-file-menu [dired]
    '(menu-item "Open Directory..." dired
! 	      :enable (menu-bar-non-minibuffer-window-p)
  	      :help "Read a directory, to operate on its files"))
  (define-key menu-bar-file-menu [open-file]
    '(menu-item "Open File..." menu-find-file-existing
--- 203,215 ----
  	      :help "Discard (kill) current buffer"))
  (define-key menu-bar-file-menu [insert-file]
    '(menu-item "Insert File..." insert-file
! 	      :enable (and (menu-bar-non-minibuffer-window-p)
! 			   (menu-bar-menu-frame-live-and-visible-p))
  	      :help "Insert another file into current buffer"))
  (define-key menu-bar-file-menu [dired]
    '(menu-item "Open Directory..." dired
! 	      :enable (and (menu-bar-non-minibuffer-window-p)
! 			   (menu-bar-menu-frame-live-and-visible-p))
  	      :help "Read a directory, to operate on its files"))
  (define-key menu-bar-file-menu [open-file]
    '(menu-item "Open File..." menu-find-file-existing
***************
*** 357,363 ****
  
  ;;; Assemble the top-level Edit menu items.
  (define-key menu-bar-edit-menu [props]
!   '(menu-item "Text Properties" facemenu-menu))
  
  (define-key menu-bar-edit-menu [fill]
    '(menu-item "Fill" fill-region
--- 378,385 ----
  
  ;;; Assemble the top-level Edit menu items.
  (define-key menu-bar-edit-menu [props]
!   '(menu-item "Text Properties" facemenu-menu
! 	      :enable (menu-bar-menu-frame-live-and-visible-p)))
  
  (define-key menu-bar-edit-menu [fill]
    '(menu-item "Fill" fill-region
***************
*** 428,446 ****
  	      :help "Read a line number and go to that line"))
  
  (define-key menu-bar-edit-menu [goto]
!   (list 'menu-item "Go To" menu-bar-goto-menu))
  
  (define-key menu-bar-edit-menu [replace]
!   (list 'menu-item "Replace" menu-bar-replace-menu))
  
  (define-key menu-bar-edit-menu [search]
!   (list 'menu-item "Search" menu-bar-search-menu))
  
  (define-key menu-bar-edit-menu [separator-search]
    '(menu-item "--"))
  
  (define-key menu-bar-edit-menu [mark-whole-buffer]
    '(menu-item "Select All" mark-whole-buffer
  	      :help "Mark the whole buffer for a subsequent cut/copy"))
  (define-key menu-bar-edit-menu [clear]
    '(menu-item "Clear" delete-region
--- 450,472 ----
  	      :help "Read a line number and go to that line"))
  
  (define-key menu-bar-edit-menu [goto]
!   (list 'menu-item "Go To" menu-bar-goto-menu
! 	:enable (menu-bar-menu-frame-live-and-visible-p)))
  
  (define-key menu-bar-edit-menu [replace]
!   (list 'menu-item "Replace" menu-bar-replace-menu
! 	:enable (menu-bar-menu-frame-live-and-visible-p)))
  
  (define-key menu-bar-edit-menu [search]
!   (list 'menu-item "Search" menu-bar-search-menu
! 	:enable (menu-bar-menu-frame-live-and-visible-p)))
  
  (define-key menu-bar-edit-menu [separator-search]
    '(menu-item "--"))
  
  (define-key menu-bar-edit-menu [mark-whole-buffer]
    '(menu-item "Select All" mark-whole-buffer
+ 	      :enable (menu-bar-menu-frame-live-and-visible-p)
  	      :help "Mark the whole buffer for a subsequent cut/copy"))
  (define-key menu-bar-edit-menu [clear]
    '(menu-item "Clear" delete-region
***************
*** 453,459 ****
  (fset 'yank-menu (cons 'keymap yank-menu))
  (define-key menu-bar-edit-menu [paste-from-menu]
    '(menu-item "Paste from Kill Menu" yank-menu
! 	      :enable (and (cdr yank-menu) (not buffer-read-only))
  	      :help "Choose a string from the kill ring and paste it"))
  (define-key menu-bar-edit-menu [paste]
    '(menu-item "Paste" yank
--- 479,486 ----
  (fset 'yank-menu (cons 'keymap yank-menu))
  (define-key menu-bar-edit-menu [paste-from-menu]
    '(menu-item "Paste from Kill Menu" yank-menu
! 	      :enable (and (cdr yank-menu) (not buffer-read-only)
!  			   (menu-bar-menu-frame-live-and-visible-p))
  	      :help "Choose a string from the kill ring and paste it"))
  (define-key menu-bar-edit-menu [paste]
    '(menu-item "Paste" yank
***************
*** 461,467 ****
  		       ;; Emacs compiled --without-x doesn't have
  		       ;; x-selection-exists-p.
  		       (fboundp 'x-selection-exists-p)
! 		       (x-selection-exists-p) (not buffer-read-only))
  	      :help "Paste (yank) text most recently cut/copied"))
  (define-key menu-bar-edit-menu [copy]
    '(menu-item "Copy" menu-bar-kill-ring-save
--- 488,495 ----
  		       ;; Emacs compiled --without-x doesn't have
  		       ;; x-selection-exists-p.
  		       (fboundp 'x-selection-exists-p)
! 		       (x-selection-exists-p) (not buffer-read-only)
! 		       (menu-bar-menu-frame-live-and-visible-p))
  	      :help "Paste (yank) text most recently cut/copied"))
  (define-key menu-bar-edit-menu [copy]
    '(menu-item "Copy" menu-bar-kill-ring-save
***************
*** 473,481 ****
--- 501,511 ----
  	      :enable (and mark-active (not buffer-read-only))
  	      :help
  	      "Cut (kill) text in region between mark and current position"))
+ 			   (menu-bar-menu-frame-live-and-visible-p)
  (define-key menu-bar-edit-menu [undo]
    '(menu-item "Undo" undo
  	      :enable (and (not buffer-read-only)
+ 			   (menu-bar-menu-frame-live-and-visible-p)
  			   (not (eq t buffer-undo-list))
  			   (if (eq last-command 'undo)
  			       (listp pending-undo-list)
***************
*** 1409,1429 ****
    '(menu-item "Emacs Tutorial" help-with-tutorial
  	      :help "Learn how to use Emacs"))
  
- (defun menu-bar-menu-frame-live-and-visible-p ()
-   "Return non-nil if the menu frame is alive and visible.
- The menu frame is the frame for which we are updating the menu."
-   (let ((menu-frame (or menu-updating-frame (selected-frame))))
-     (and (frame-live-p menu-frame)
- 	 (frame-visible-p menu-frame))))
- 
- (defun menu-bar-non-minibuffer-window-p ()
-   "Return non-nil if selected window of the menu frame is not a minibuf window.
- 
- See the documentation of `menu-bar-menu-frame-live-and-visible-p'
- for the definition of the menu frame."
-   (let ((menu-frame (or menu-updating-frame (selected-frame))))
-     (not (window-minibuffer-p (frame-selected-window menu-frame)))))
- 
  (defun kill-this-buffer ()	; for the menu bar
    "Kill the current buffer.
  When called in the minibuffer, get out of the minibuffer
--- 1583,1588 ----
***************
*** 1573,1580 ****
        (or (string-match "^ " (buffer-name (car buffers)))
  	  (setq count (1+ count)))
        (setq buffers (cdr buffers)))
!     (or (not (menu-bar-non-minibuffer-window-p))
! 	(> count 1))))
  
  (put 'dired 'menu-enable '(menu-bar-non-minibuffer-window-p))
  
--- 1599,1608 ----
        (or (string-match "^ " (buffer-name (car buffers)))
  	  (setq count (1+ count)))
        (setq buffers (cdr buffers)))
!     (and 
!      (menu-bar-menu-frame-live-and-visible-p)
!      (or (not (menu-bar-non-minibuffer-window-p))
! 	 (> count 1)))))
  
  (put 'dired 'menu-enable '(menu-bar-non-minibuffer-window-p))
  
