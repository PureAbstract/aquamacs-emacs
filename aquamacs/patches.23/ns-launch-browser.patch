*** src/nsfns.m	14 Mar 2009 21:20:06 -0000	1.41
--- src/nsfns.m	15 Mar 2009 20:40:39 -0000
***************
*** 2038,2044 ****
    return build_string ([utfStr UTF8String]);
  }
  
- 
  #ifdef NS_IMPL_COCOA
  
  /* Compile and execute the AppleScript SCRIPT and return the error
--- 2038,2043 ----
***************
*** 2127,2133 ****
  #endif
  
  
- 
  /* ==========================================================================
  
      Miscellaneous functions not called through hooks
--- 2126,2131 ----
***************
*** 2142,2147 ****
--- 2140,2250 ----
    return check_ns_frame (frame);
  }
  
+ DEFUN ("ns-launch-URL-with-default-browser", Fns_launch_url_with_default_browser, Sns_launch_url_with_default_browser, 1, 1, 0,
+        doc: /* Launch the URL with the appropriate handler application.
+  file:// URLs are always opened with the system's default browser, i.e.
+  the http:// handler. Return non-nil if the URL has been successfully 
+  launched.*/)
+ (URLstring)
+ Lisp_Object URLstring;
+ {
+ 	check_ns();
+ 	CHECK_STRING (URLstring);
+ 	if (NILP (URLstring))
+     {
+ 		error ("URL is nil.");
+ 		return Qnil;
+     }
+ 	
+ 	BLOCK_INPUT;
+ 	// get default browser
+ 	
+ 	
+ 	
+ 	LSLaunchURLSpec spec;
+ 	OSStatus status;
+ 	
+ 	if (strncmp("file:/", SDATA(URLstring), 6) == 0)
+     {
+ 		/* Build URL to find out what the default handler for http is.
+ 		 Without an explicit application reference, the launch function
+ 		 (e.g. LSOpenFromURLSpec or ICLaunchURL) will determine the
+ 		 default file handler for the file, which is not neccessarily the
+ 		 default browser.*/
+ 		
+ 		FSRef appRef;  // will be discarded
+ 		char* urlStr = "http://www.gnu.org/"; // just a test URL
+ 		CFStringRef inURLCfs = CFStringCreateWithCString(NULL, urlStr,	
+ 														 kCFStringEncodingASCII);
+ 		CFURLRef inURLRef = CFURLCreateWithString(NULL, inURLCfs, NULL);
+ 		
+ 		/* Get application for opening html pages */
+ 		status = LSGetApplicationForURL(inURLRef, kLSRolesAll, &appRef,
+ 										&spec.appURL);
+ 		CFRelease(inURLRef);
+ 		CFRelease(inURLCfs);
+     } else
+     {
+ 		spec.appURL = NULL; /* use preferred application */
+ 		status = noErr;
+     }
+ 	if (status == noErr) 
+     {
+ 		/* Open the file / http with the http handler */
+ 		CFStringRef targetUrlCfs = 
+ 		CFStringCreateWithCString(NULL, SDATA(URLstring),
+ 								  kCFStringEncodingASCII);
+ 		
+ 		/* CFStringRef targetUrlCfsEscaped = 
+ 		 CFURLCreateStringByAddingPercentEscapes(NULL, targetUrlCfs, 
+ 		 NULL, NULL, 
+ 		 kCFStringEncodingUTF8);
+ 		 the URL must already be encoded. */
+ 		CFURLRef targetUrlRef = 
+ 		CFURLCreateWithString(NULL, targetUrlCfs, NULL);
+ 		
+ 		if (targetUrlRef) 
+ 		{
+ 			
+ 			if ( (spec.itemURLs = 
+ 				  CFArrayCreate(NULL, (const void **)&targetUrlRef, 1, 
+ 								&kCFTypeArrayCallBacks)) == NULL)
+ 			{
+ 				return Qnil;
+ 			}
+ 			spec.passThruParams = NULL;
+ 			spec.launchFlags = kLSLaunchDefaults;
+ 			spec.asyncRefCon = NULL;
+ 			status = LSOpenFromURLSpec(&spec, NULL);
+ 			
+ 			CFRelease(spec.itemURLs);
+ 			CFRelease(targetUrlRef);
+ 		}
+ 		CFRelease(targetUrlCfs);
+ 		/* CFRelease(targetUrlCfsEscaped); */
+ 		UNBLOCK_INPUT;
+ 		
+ 		if (! targetUrlRef) 
+ 		{
+ 			error ("Could not produce valid URL from string.");
+ 			return Qnil;
+ 		}
+ 		if (status != noErr) 
+ 		{
+ 			error ("Failed to launch default browser. Error %d", XINT(status));
+ 			return Qnil;
+ 		}
+     } 
+ 	else
+     {
+ 		UNBLOCK_INPUT;
+ 		error ("Could not determine default browser. Error %d", XINT(status));
+ 		return Qnil;
+     }
+ 	
+ 	
+ 	return Qt;
+ }
  
  /* called from frame.c */
  struct ns_display_info *
***************
*** 2679,2684 ****
--- 2782,2788 ----
                 doc: /* Toolkit version for NS Windowing.  */);
    Vns_version_string = ns_appkit_version_str ();
  
+   defsubr (&Sns_launch_url_with_default_browser);
    defsubr (&Sns_read_file_name);
    defsubr (&Sns_get_resource);
    defsubr (&Sns_set_resource);
*** lisp/net/browse-url.el	5 Jan 2009 03:22:43 -0000	1.77
--- lisp/net/browse-url.el	15 Mar 2009 20:31:56 -0000
***************
*** 834,841 ****
      (w32-shell-execute "open" url)))
  
  (defun browse-url-default-macosx-browser (url &optional new-window)
    (interactive (browse-url-interactive-arg "URL: "))
!   (start-process (concat "open " url) nil "open" url))
  
  ;; --- Netscape ---
  
--- 834,848 ----
      (w32-shell-execute "open" url)))
  
  (defun browse-url-default-macosx-browser (url &optional new-window)
+ "Launch the default browser specified in Mac OS X.
+ NEW-WINDOW is ignored."
    (interactive (browse-url-interactive-arg "URL: "))
!   (condition-case nil
!       (ns-launch-URL-with-default-browser url)
!     (error 
!      ;; fallback - sometimes http is not registered in the
!      ;; LaunchServices database
!      (start-process (concat "open " url) nil "open" url))))
  
  ;; --- Netscape ---
  
