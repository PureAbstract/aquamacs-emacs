===================================================================
RCS file: /sources/emacs/emacs/lisp/bindings.el,v
retrieving revision 1.209
diff -c -r1.209 bindings.el
*** lisp/bindings.el	30 Jun 2008 19:37:02 -0000	1.209
--- lisp/bindings.el	19 Jul 2008 21:57:12 -0000
***************
*** 153,158 ****
--- 153,159 ----
        (setq desc
  	    (propertize
  	     mnemonic
+  	     'face 'mode-line-flags
  	     'help-echo (format "End-of-line style: %s\nmouse-1 to cycle"
  				(if (eq eol 0) "Unix-style LF"
  				  (if (eq eol 1) "Dos-style CRLF"
***************
*** 177,182 ****
--- 178,184 ----
    `(""
      (current-input-method
       (:propertize ("" current-input-method-title)
+ 		  face mode-line-flags
  		  help-echo (concat
  			     "Current input method: "
  			     current-input-method
***************
*** 187,192 ****
--- 189,195 ----
  		  mouse-face mode-line-highlight))
      ,(propertize
        "%z"
+       'face 'mode-line-flags
        'help-echo
        #'(lambda (window object point)
  	  (with-current-buffer (window-buffer window)
***************
*** 227,232 ****
--- 230,236 ----
  (defvar mode-line-modified
    (list (propertize
  	 "%1*"
+ 	 'face 'mode-line-flags
  	 'help-echo (purecopy (lambda (window object point)
   				(format "Buffer is %s\nmouse-1 toggles"
  					(save-selected-window
***************
*** 240,245 ****
--- 244,250 ----
  	 'mouse-face 'mode-line-highlight)
  	(propertize
  	 "%1+"
+ 	 'face 'mode-line-flags
  	 'help-echo  (purecopy (lambda (window object point)
  				 (format "Buffer is %sodified\nmouse-1 toggles modified state"
  					 (save-selected-window
***************
*** 317,337 ****
      map) "\
  Keymap to display on column and line numbers.")
  
  (let* ((help-echo
  	;; The multi-line message doesn't work terribly well on the
  	;; bottom mode line...  Better ideas?
  	;; 	  "\
  	;; mouse-1: select window, mouse-2: delete others, mouse-3: delete,
  	;; drag-mouse-1: resize, C-mouse-2: split horizontally"
! 	"mouse-1: Select (drag to resize)\n\
! mouse-2: Make current window occupy the whole frame\n\
! mouse-3: Remove current window from display")
         (recursive-edit-help-echo "Recursive edit, type C-M-c to get out")
         (dashes (propertize "--" 'help-echo help-echo))
         (standard-mode-line-format
  	(list
  	 "%e"
! 	 (propertize "-" 'help-echo help-echo)
  	 'mode-line-mule-info
  	 'mode-line-client
  	 'mode-line-modified
--- 322,346 ----
      map) "\
  Keymap to display on column and line numbers.")
  
+ (defvar command-line-processed nil)
+ (defvar before-init-hook nil)
+ (eval-at-startup ;; because of window-system
  (let* ((help-echo
  	;; The multi-line message doesn't work terribly well on the
  	;; bottom mode line...  Better ideas?
  	;; 	  "\
  	;; mouse-1: select window, mouse-2: delete others, mouse-3: delete,
  	;; drag-mouse-1: resize, C-mouse-2: split horizontally"
! 	"mouse-1: select (drag to resize), mouse-2: delete others, mouse-3: delete this")
         (recursive-edit-help-echo "Recursive edit, type C-M-c to get out")
         (dashes (propertize "--" 'help-echo help-echo))
+        (lotsofdashes (if window-system (make-string 100 32) "%-"))
+        (dash (propertize (if window-system " " "-") 'help-echo help-echo))
+        (dashes (propertize (if window-system "  " "--") 'help-echo help-echo))
         (standard-mode-line-format
  	(list
  	 "%e"
! 	 (propertize dash 'help-echo help-echo)
  	 'mode-line-mule-info
  	 'mode-line-client
  	 'mode-line-modified
***************
*** 345,351 ****
  	 'mode-line-modes
  	 `(which-func-mode ("" which-func-format ,dashes))
  	 `(global-mode-string (,dashes global-mode-string))
! 	 (propertize "-%-" 'help-echo help-echo)))
         (standard-mode-line-modes
  	(list
  	 (propertize "%[" 'help-echo recursive-edit-help-echo)
--- 354,360 ----
  	 'mode-line-modes
  	 `(which-func-mode ("" which-func-format ,dashes))
  	 `(global-mode-string (,dashes global-mode-string))
! 	 (propertize (concat dash lotsofdashes) 'help-echo help-echo)))
         (standard-mode-line-modes
  	(list
  	 (propertize "%[" 'help-echo recursive-edit-help-echo)
***************
*** 371,377 ****
  				 'mouse-2 #'mode-line-widen))
  	 (propertize ")" 'help-echo help-echo)
  	 (propertize "%]" 'help-echo recursive-edit-help-echo)
! 	 (propertize "--" 'help-echo help-echo)))
  
         (standard-mode-line-position
  	`((-3 ,(propertize
--- 380,386 ----
  				 'mouse-2 #'mode-line-widen))
  	 (propertize ")" 'help-echo help-echo)
  	 (propertize "%]" 'help-echo recursive-edit-help-echo)
! 	 (propertize dashes 'help-echo help-echo)))
  
         (standard-mode-line-position
  	`((-3 ,(propertize
***************
*** 421,427 ****
  
    (setq-default mode-line-position standard-mode-line-position)
    (put 'mode-line-position 'standard-value
!        (list `(quote ,standard-mode-line-position))))
  
  (defvar mode-line-buffer-identification-keymap
    ;; Add menu of buffer operations to the buffer identification part
--- 430,436 ----
  
    (setq-default mode-line-position standard-mode-line-position)
    (put 'mode-line-position 'standard-value
!        (list `(quote ,standard-mode-line-position)))))
  
  (defvar mode-line-buffer-identification-keymap
    ;; Add menu of buffer operations to the buffer identification part
