Index: src/macterm.c
===================================================================
RCS file: /sources/emacs/emacs/src/macterm.c,v
retrieving revision 1.186
diff -c -r1.186 macterm.c
*** src/macterm.c	27 Aug 2006 07:09:52 -0000	1.186
--- src/macterm.c	4 Sep 2006 15:00:42 -0000
***************
*** 8507,8512 ****
--- 8507,8515 ----
  /* Modifier associated with the function key, or nil to ignore. */
  Lisp_Object Vmac_function_modifier;
  
+ /* Modifier associated with the caps lock key, or nil to ignore. */
+ Lisp_Object Vmac_capslock_modifier;
+ 
  /* True if the option and command modifiers should be used to emulate
     a three button mouse */
  Lisp_Object Vmac_emulate_three_button_mouse;
***************
*** 8534,8540 ****
  
  /* Apple Events */
  #if USE_CARBON_EVENTS
! static Lisp_Object Qhi_command;
  #ifdef MAC_OSX
  extern Lisp_Object Qwindow;
  static Lisp_Object Qtoolbar_switch_mode;
--- 8537,8543 ----
  
  /* Apple Events */
  #if USE_CARBON_EVENTS
! static Lisp_Object Qhi_command, Qappevent;
  #ifdef MAC_OSX
  extern Lisp_Object Qwindow;
  static Lisp_Object Qtoolbar_switch_mode;
***************
*** 8701,8706 ****
--- 8704,8714 ----
      if (INTEGERP(val))
        result |= XUINT(val);
    }
+   if (!NILP (Vmac_capslock_modifier) && (mods & alphaLock)) {
+     Lisp_Object val = Fget(Vmac_capslock_modifier, Qmodifier_value);
+     if (INTEGERP(val))
+       result |= XUINT(val);
+   }
  #endif
  
    return result;
***************
*** 9399,9404 ****
--- 9407,9480 ----
  }
  
  static pascal OSStatus
+ mac_handle_application_event (next_handler, event, data)
+      EventHandlerCallRef next_handler;
+      EventRef event;
+      void *data;
+ {
+   OSStatus result, err;
+   Lisp_Object class_key, id_key, binding;
+   AEEventID ae_id = '    ';
+ 
+   result = CallNextEventHandler (next_handler, event);
+   if (result != eventNotHandledErr)
+     return result;
+  
+ 
+   switch (GetEventKind (event))
+     {
+     case kEventAppActivated:
+       ae_id = 'APAC';
+       break;
+     case kEventAppDeactivated:
+       ae_id = 'APDA';
+     }
+   /* An application event is mapped to an Apple event whose event class
+      symbol is `appevent' and event ID is its command ID.  */
+   class_key = Qappevent;
+ 
+   /* retrieve event from the appropriate keymap */
+   mac_find_apple_event_spec (0, ae_id,
+ 			     &class_key, &id_key, &binding);
+   if (!NILP (binding) && !EQ (binding, Qundefined))
+     {
+       if (INTEGERP (binding))
+ 	return XINT (binding);
+       else
+ 	{
+ 	  AppleEvent apple_event;
+ 	  static EventParamName names[] = {};
+ 	  static EventParamType types[] = {};
+ 	  err = create_apple_event_from_event_ref (event, 0, names, types,
+ 						   &apple_event);
+ 	  if (err == noErr)
+ 	    {
+ 	      mac_store_apple_event (class_key, id_key, &apple_event);
+ 	      AEDisposeDesc (&apple_event);
+ 	      return noErr;
+ 	    }
+ 	}
+     }
+ 
+   return eventNotHandledErr;
+ }
+ 
+ 
+ static OSErr
+ init_application_event_handler ()
+ {
+   EventTypeSpec specs[] = {{kEventClassApplication,  kEventAppActivated},
+ 			   {kEventClassApplication,  kEventAppDeactivated}};
+   static EventHandlerUPP handle_application_eventUPP = NULL;
+ 
+   if (handle_application_eventUPP == NULL)
+     handle_application_eventUPP = NewEventHandlerUPP (mac_handle_application_event);
+   return InstallApplicationEventHandler (handle_application_eventUPP,
+ 					 GetEventTypeCount (specs), specs,
+ 					 NULL, NULL);
+ }
+ 
+ static pascal OSStatus
  mac_handle_window_event (next_handler, event, data)
       EventHandlerCallRef next_handler;
       EventRef event;
***************
*** 11458,11463 ****
--- 11534,11540 ----
  #endif	/* MAC_OSX */
  
    init_command_handler ();
+   init_application_event_handler ();
  
    init_menu_bar ();
  
***************
*** 11508,11513 ****
--- 11585,11591 ----
  
  #if USE_CARBON_EVENTS
    Qhi_command   = intern ("hi-command");    staticpro (&Qhi_command);
+   Qappevent   = intern ("application-event");    staticpro (&Qappevent);
  #ifdef MAC_OSX
    Qtoolbar_switch_mode = intern ("toolbar-switch-mode");
    staticpro (&Qtoolbar_switch_mode);
***************
*** 11610,11615 ****
--- 11688,11700 ----
  unexpected results for some keys on non-US/GB keyboards.  */);
    Vmac_function_modifier = Qnil;
  
+   DEFVAR_LISP ("mac-capslock-modifier", &Vmac_capslock_modifier,
+     doc: /* *Modifier key assumed when the Mac Caps Lock key is pressed.
+ The value can be `control', `meta', `alt', `hyper', or `super' for the
+ respective modifier.  Note that Caps Lock will continue to act as a
+ toggle key.  */);
+   Vmac_capslock_modifier = Qnil;
+ 
    DEFVAR_LISP ("mac-emulate-three-button-mouse",
  	       &Vmac_emulate_three_button_mouse,
      doc: /* *Specify a way of three button mouse emulation.
