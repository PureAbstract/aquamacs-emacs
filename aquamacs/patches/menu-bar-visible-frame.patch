Index: lisp/menu-bar.el
===================================================================
RCS file: /sources/emacs/emacs/lisp/menu-bar.el,v
retrieving revision 1.291
diff -c -r1.291 menu-bar.el
*** lisp/menu-bar.el	20 May 2006 20:42:39 -0000	1.291
--- lisp/menu-bar.el	18 Jun 2006 11:59:58 -0000
***************
*** 172,177 ****
--- 172,178 ----
    '(menu-item "Save" save-buffer
  	      :enable (and (buffer-modified-p)
  			   (buffer-file-name)
+ 			   (menu-bar-menu-frame-live-and-visible-p)
  			   (menu-bar-non-minibuffer-window-p))
  	      :help "Save current buffer to its file"))
  
***************
*** 195,201 ****
  	      :help "Discard (kill) current buffer"))
  (define-key menu-bar-file-menu [insert-file]
    '(menu-item "Insert File..." insert-file
! 	      :enable (menu-bar-non-minibuffer-window-p)
  	      :help "Insert another file into current buffer"))
  (define-key menu-bar-file-menu [dired]
    '(menu-item "Open Directory..." dired
--- 196,203 ----
  	      :help "Discard (kill) current buffer"))
  (define-key menu-bar-file-menu [insert-file]
    '(menu-item "Insert File..." insert-file
! 	      :enable (and (menu-bar-non-minibuffer-window-p)
! 			   (menu-bar-menu-frame-live-and-visible-p))
  	      :help "Insert another file into current buffer"))
  (define-key menu-bar-file-menu [dired]
    '(menu-item "Open Directory..." dired
***************
*** 370,375 ****
--- 372,378 ----
  ;;; Assemble the top-level Edit menu items.
  (define-key menu-bar-edit-menu [props]
    '(menu-item "Text Properties" facemenu-menu
+ 	      :enable (menu-bar-menu-frame-live-and-visible-p)
  	      :help "Change properties of text in region"))
  
  (define-key menu-bar-edit-menu [fill]
***************
*** 382,388 ****
    '(menu-item "--"))
  
  (define-key menu-bar-edit-menu [bookmark]
!   '(menu-item "Bookmarks" menu-bar-bookmark-map
  	      :help "Record positions and jump between them"))
  
  (defvar menu-bar-goto-menu (make-sparse-keymap "Go To"))
--- 385,391 ----
    '(menu-item "--"))
  
  (define-key menu-bar-edit-menu [bookmark]
!   `(menu-item "Bookmarks" ,menu-bar-bookmark-map
  	      :help "Record positions and jump between them"))
  
  (defvar menu-bar-goto-menu (make-sparse-keymap "Go To"))
***************
*** 442,460 ****
  	      :help "Read a line number and go to that line"))
  
  (define-key menu-bar-edit-menu [goto]
!   (list 'menu-item "Go To" menu-bar-goto-menu))
  
  (define-key menu-bar-edit-menu [replace]
!   (list 'menu-item "Replace" menu-bar-replace-menu))
  
  (define-key menu-bar-edit-menu [search]
!   (list 'menu-item "Search" menu-bar-search-menu))
  
  (define-key menu-bar-edit-menu [separator-search]
    '(menu-item "--"))
  
  (define-key menu-bar-edit-menu [mark-whole-buffer]
    '(menu-item "Select All" mark-whole-buffer
  	      :help "Mark the whole buffer for a subsequent cut/copy."))
  (define-key menu-bar-edit-menu [clear]
    '(menu-item "Clear" delete-region
--- 445,467 ----
  	      :help "Read a line number and go to that line"))
  
  (define-key menu-bar-edit-menu [goto]
!   `(menu-item "Go To" ,menu-bar-goto-menu
! 	        :enable (menu-bar-menu-frame-live-and-visible-p)))
  
  (define-key menu-bar-edit-menu [replace]
!   `(menu-item "Replace" ,menu-bar-replace-menu
! 	      :enable (menu-bar-menu-frame-live-and-visible-p)))
  
  (define-key menu-bar-edit-menu [search]
!   `(menu-item "Search" ,menu-bar-search-menu
! 	      :enable (menu-bar-menu-frame-live-and-visible-p)))
  
  (define-key menu-bar-edit-menu [separator-search]
    '(menu-item "--"))
  
  (define-key menu-bar-edit-menu [mark-whole-buffer]
    '(menu-item "Select All" mark-whole-buffer
+ 	      :enable (menu-bar-menu-frame-live-and-visible-p)
  	      :help "Mark the whole buffer for a subsequent cut/copy."))
  (define-key menu-bar-edit-menu [clear]
    '(menu-item "Clear" delete-region
***************
*** 467,473 ****
  (fset 'yank-menu (cons 'keymap yank-menu))
  (define-key menu-bar-edit-menu [select-paste]
    '(menu-item "Select and Paste" yank-menu
! 	      :enable (and (cdr yank-menu) (not buffer-read-only))
  	      :help "Paste (yank) text cut or copied earlier"))
  (define-key menu-bar-edit-menu [paste]
    '(menu-item "Paste" yank
--- 474,482 ----
  (fset 'yank-menu (cons 'keymap yank-menu))
  (define-key menu-bar-edit-menu [select-paste]
    '(menu-item "Select and Paste" yank-menu
! 	      :enable (and (cdr yank-menu) 
! 			   (not buffer-read-only)
! 			   (menu-bar-menu-frame-live-and-visible-p))
  	      :help "Paste (yank) text cut or copied earlier"))
  (define-key menu-bar-edit-menu [paste]
    '(menu-item "Paste" yank
***************
*** 475,481 ****
  		       ;; Emacs compiled --without-x doesn't have
  		       ;; x-selection-exists-p.
  		       (fboundp 'x-selection-exists-p)
! 		       (x-selection-exists-p) (not buffer-read-only))
  	      :help "Paste (yank) text most recently cut/copied"))
  (define-key menu-bar-edit-menu [copy]
    '(menu-item "Copy" menu-bar-kill-ring-save
--- 484,491 ----
  		       ;; Emacs compiled --without-x doesn't have
  		       ;; x-selection-exists-p.
  		       (fboundp 'x-selection-exists-p)
! 		       (x-selection-exists-p) (not buffer-read-only)
! 		       (menu-bar-menu-frame-live-and-visible-p))
  	      :help "Paste (yank) text most recently cut/copied"))
  (define-key menu-bar-edit-menu [copy]
    '(menu-item "Copy" menu-bar-kill-ring-save
***************
*** 490,495 ****
--- 500,506 ----
  (define-key menu-bar-edit-menu [undo]
    '(menu-item "Undo" undo
  	      :enable (and (not buffer-read-only)
+ 			   (menu-bar-menu-frame-live-and-visible-p)
  			   (not (eq t buffer-undo-list))
  			   (if (eq last-command 'undo)
  			       (listp pending-undo-list)
***************
*** 1434,1440 ****
  The menu frame is the frame for which we are updating the menu."
    (let ((menu-frame (or menu-updating-frame (selected-frame))))
      (and (frame-live-p menu-frame)
! 	 (frame-visible-p menu-frame))))
  
  (defun menu-bar-non-minibuffer-window-p ()
    "Return non-nil if selected window of the menu frame is not a minibuf window.
--- 1445,1452 ----
  The menu frame is the frame for which we are updating the menu."
    (let ((menu-frame (or menu-updating-frame (selected-frame))))
      (and (frame-live-p menu-frame)
! 	 ;; not icon
! 	 (eq (frame-visible-p menu-frame) t))))
  
  (defun menu-bar-non-minibuffer-window-p ()
    "Return non-nil if selected window of the menu frame is not a minibuf window.
***************
*** 1457,1462 ****
--- 1469,1475 ----
  	  (setq count (1+ count)))
        (setq buffers (cdr buffers)))
      (and (menu-bar-non-minibuffer-window-p)
+ 	 (menu-bar-menu-frame-live-and-visible-p)
  	 (> count 1))))
  
  (put 'dired 'menu-enable '(menu-bar-non-minibuffer-window-p))
