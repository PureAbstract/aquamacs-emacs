Index: lisp/loadup.el
===================================================================
RCS file: /sources/emacs/emacs/lisp/loadup.el,v
retrieving revision 1.150.2.3
diff -c -r1.150.2.3 loadup.el
*** lisp/loadup.el	7 Jan 2008 02:44:35 -0000	1.150.2.3
--- lisp/loadup.el	4 Apr 2008 16:23:30 -0000
***************
*** 209,214 ****
--- 209,217 ----
  (if (fboundp 'atan)	; preload some constants and
      (progn		; floating pt. functions if we have float support.
        (load "emacs-lisp/float-sup")))
+ (if (eq system-type 'darwin)
+     (progn
+       (load "term/mac-im")))
  (message "%s" (garbage-collect))
  
  (load "vc-hooks")
diff -p -N -r -x '*.orig' ../emacs-22.1/lisp/term/mac-im.el lisp/term/mac-im.el
*** ../emacs-22.1/lisp/term/mac-im.el	1970-01-01 09:00:00.000000000 +0900
--- lisp/term/mac-im.el	2007-06-28 19:49:03.000000000 +0900
***************
*** 0 ****
--- 1,226 ----
+ ;; mac-im.el --- Input Method for Mac OS X -*-coding: iso-2022-7bit;-*-
+ 
+ ;; Copyright (C) 2005, 2006, 2007 HASHIMOTO Taiichi <taiichi2@mac.com>
+ ;; Keywords: input method, Mac OS X
+ 
+ ;; This file is not part of GNU Emacs.
+ 
+ ;; GNU Emacs is free software; you can redistribute it and/or modify
+ ;; it under the terms of the GNU General Public License as published by
+ ;; the Free Software Foundation; either version 2, or (at your option)
+ ;; any later version.
+ 
+ ;; You should have received a copy of the GNU General Public License
+ ;; along with GNU Emacs; see the file COPYING.  If not, write to the
+ ;; Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ ;; Boston, MA 02111-1307, USA.
+ 
+ ;; Written by Taiichi Hashimoto (taiichi2@mac.com).
+ 
+ 
+ ;;
+ ;; Variables and functions to change a input method 
+ ;;
+ (defvar mac-input-method-parameters
+   '((0 (title . "")
+        (cursor-color)
+        (cursor-type))
+     (1 (title . "$B$"(B")
+        (cursor-color)
+        (cursor-type))
+     (2 (title . "$BHK(B")
+        (cursor-color)
+        (cursor-type))
+     (3 (title . "$(C0!(B")
+        (cursor-color)
+        (cursor-type))
+     (7 (title . "Cy")
+        (cursor-color)
+        (cursor-type))
+     (25 (title . "$B4J(B")
+ 	(cursor-color)
+ 	(cursor-type))
+     (29 (title . "EU")
+ 	(cursor-color)
+ 	(cursor-type))
+     )
+   "Alist of Mac script code vs parameters for input method on MacOSX.")
+ 
+ (defun mac-key-script (lang)
+   "Funtion to convert a language name to a key script."
+   (cond ((symbolp lang)
+ 	 (cond ((eq lang 'roman) 0)
+ 	       ((eq lang 'japanese) 1)
+ 	       ((eq lang 'traditional-chinese) 2)
+ 	       ((eq lang 'korean) 3)
+ 	       ((eq lang 'cyrillic) 7)
+ 	       ((eq lang 'simple-chinese) 25)
+ 	       ((eq lang 'central-euro-roman) 25)
+ 	       (t -1)))
+ 	((numberp lang) lang)
+ 	(t -1)))
+ 
+ (defun mac-set-input-method-parameter (language key value)
+   "Function to set a parameter of a input method."
+   (let* ((key-script (mac-key-script language))
+ 	 (lang-param (assq key-script mac-input-method-parameters))
+ 	 (param (assq key lang-param)))
+     (if lang-param
+ 	(if param
+ 	    (setcdr param value)
+ 	  (setcdr lang-param (cons (cons key value) (cdr lang-param))))
+       (setq mac-input-method-parameters
+ 	    (cons (list key-script (cons key value))
+ 		  mac-input-method-parameters)))))
+ 
+ (defun mac-get-input-method-parameter (language key)
+   "Function to get a parameter of a input method."
+   (assq key (cdr (assq (mac-key-script language)
+ 		       mac-input-method-parameters))))
+ 
+ (defun mac-input-method-update (lang)
+   "Funtion to update parameters of a input method."
+   (let ((title (cdr (mac-get-input-method-parameter lang 'title)))
+ 	(ctype (or (cdr (mac-get-input-method-parameter lang 'cursor-type))
+ 		   (cdr (assq 'cursor-type default-frame-alist))
+ 		   default-cursor-type))
+ 	(ccolor (or (cdr (mac-get-input-method-parameter lang 'cursor-color))
+ 		    (cdr (assq 'cursor-color default-frame-alist)))))
+     (setq current-input-method-title title)
+     (if ctype (setq cursor-type ctype))
+     (if ccolor (set-cursor-color ccolor))
+     (force-mode-line-update 'all)
+     (if isearch-mode (isearch-update))))
+ 
+ (defun mac-toggle-input-method (&optional arg)
+   "Function to toggle input method on MacOSX."
+   (interactive)
+   (let ((lang (mac-get-current-key-script)))
+     (if arg
+ 	(progn
+ 	  (make-local-variable 'input-method-function)
+ 	  (make-local-variable 'cursor-type)
+ 
+ 	  (setq inactivate-current-input-method-function
+ 		'mac-toggle-input-method)
+ 	  (setq input-method-function nil)
+ 	  (setq describe-current-input-method-function nil)
+ 
+ 	  (mac-input-method-update (mac-get-last-key-script))
+ 	  (if (= lang 0) (mac-set-key-script -1)))
+       (kill-local-variable 'input-method-function)
+       (kill-local-variable 'cursor-type)
+       
+       (setq describe-current-input-method-function nil)
+ 
+       (mac-input-method-update 0)
+       (if (not (= lang 0)) (mac-set-key-script -17)))))
+ 
+ (defun mac-change-language-to-us ()
+   "Function to change language (Apple Key Script) to us."
+   (interactive)
+   (mac-toggle-input-method nil))
+ 
+ (defun mac-handle-input-method-change (event)
+   "Function run when a input method change."
+   (interactive "e")
+   
+   (let ((lang (car (cadr event))))
+ 
+     (if (and (not current-input-method) (> lang 0))
+         (if isearch-mode
+             (isearch-toggle-input-method)
+           (set-input-method "MacOSX"))
+       (if (and current-input-method (= lang 0))
+ 	  (if isearch-mode
+ 	      (isearch-toggle-input-method)
+ 	    (toggle-input-method nil))))
+ 
+     (mac-input-method-update lang)))
+ 
+ 
+ ;;
+ ;; Emacs input method for input method on MacOSX.
+ ;;
+ (register-input-method "MacOSX" "MacOSX" 'mac-toggle-input-method
+ 		       "Mac" "Input Method on MacOSX System")
+ 
+ 
+ ;;
+ ;; Minor mode of using input methods on MacOS X
+ ;;
+ (define-minor-mode mac-input-method-mode
+   "Use input methods on MacOSX."
+   :init-value nil
+   :group 'mac
+   :global t
+ 
+   (if mac-input-method-mode
+       (progn
+ 	(setq default-input-method "MacOSX")
+ 	(add-hook 'minibuffer-setup-hook 'mac-change-language-to-us))
+     (setq default-input-method nil)))
+ 
+ ;;
+ ;; Valiable and functions to ignore system shortcut.
+ ;;
+ (defvar mac-ignore-shortcut nil
+   "A list of ignore shortcut on MacOSX.")
+ 
+ (defun mac-add-ignore-shortcut (key)
+   (let ((command '(command cmd))
+ 	(option '(option opt))
+ 	(control '(control ctrl ctl)))
+     (add-to-list 'mac-ignore-shortcut
+ 		 (cond ((symbolp key)
+ 			(cond ((memq key command) (cons #x100 nil))
+ 			      ((memq key option)  (cons #x800 nil))
+ 			      ((memq key control) (cons #x1000 nil))
+ 			      (t (cons nil nil))))
+ 		       ((numberp key) (cons 0 key))
+ 		       ((listp key) 
+ 			(let ((l key)
+ 			      (k nil)
+ 			      (m 0))
+ 			  (while l
+ 			    (cond ((memq (car l) command)
+ 				   (if (= (logand m #x100) 0)
+ 				       (setq m (logior m #x100))))
+ 				  ((memq (car l) option)
+ 				   (if (= (logand m #x800) 0)
+ 				       (setq m (logior m #x800))))
+ 				  ((memq (car l) control)
+ 				   (if (= (logand m #x1000) 0)
+ 				       (setq m (logior m #x1000))))
+ 				  ((numberp (car l))
+ 				   (if (not k)
+ 				       (setq k (car l)))))
+ 			    (setq l (cdr l)))
+ 			  (cons m k)))
+ 		       (t (cons nil nil))))))
+ 
+ 
+ ;;
+ ;; Entry Emacs event for inline input method on MacOSX.
+ ;;
+ (define-key special-event-map
+   [mac-change-input-method] 'mac-handle-input-method-change)
+       
+ ;;
+ ;; Convert yen to backslash for JIS keyboard.
+ ;;
+ (defun mac-translate-from-yen-to-backslash () 
+   ;; Convert yen to backslash for JIS keyboard.
+   (interactive)
+ 
+   (define-key global-map [2213] nil)
+   (define-key global-map [3420] nil)
+   (define-key global-map [67111077] nil)
+   (define-key global-map [134219941] nil)
+   (define-key global-map [201328805] nil)
+   (define-key function-key-map [2213] [?\\]) ;; for Intel
+   (define-key function-key-map [3420] [?\\]) ;; for PowerPC
+   (define-key function-key-map [67111077] [?\C-\\])
+   (define-key function-key-map [134219941] [?\M-\\])
+   (define-key function-key-map [201328805] [?\C-\M-\\])
+ )
Index: src/Makefile.in
===================================================================
RCS file: /sources/emacs/emacs/src/Makefile.in,v
retrieving revision 1.340.2.2
diff -c -r1.340.2.2 Makefile.in
*** src/Makefile.in	8 Jan 2008 04:30:22 -0000	1.340.2.2
--- src/Makefile.in	4 Apr 2008 16:23:30 -0000
***************
*** 575,581 ****
  
  #ifdef HAVE_CARBON
  mac = $(dot)$(dot)/mac/
! MAC_OBJ = mac.o macterm.o macfns.o macmenu.o macselect.o fontset.o fringe.o image.o
  emacsapp = $(PWD)/$(mac)Emacs.app/
  emacsappsrc = ${srcdir}/../mac/Emacs.app/
  #endif
--- 575,581 ----
  
  #ifdef HAVE_CARBON
  mac = $(dot)$(dot)/mac/
! MAC_OBJ = mac.o macterm.o macfns.o macmenu.o macselect.o fontset.o fringe.o image.o macim.o
  emacsapp = $(PWD)/$(mac)Emacs.app/
  emacsappsrc = ${srcdir}/../mac/Emacs.app/
  #endif
***************
*** 602,608 ****
     in case they are needed there.  */
  SOME_MACHINE_OBJECTS = sunfns.o dosfns.o msdos.o \
    xterm.o xfns.o xmenu.o xselect.o xrdb.o xsmfns.o fringe.o image.o \
!   mac.o macterm.o macfns.o macmenu.o macselect.o fontset.o \
    w32.o w32bdf.o w32console.o w32fns.o w32heap.o w32inevt.o \
    w32menu.o w32proc.o w32reg.o w32select.o w32term.o w32xfns.o
  
--- 602,608 ----
     in case they are needed there.  */
  SOME_MACHINE_OBJECTS = sunfns.o dosfns.o msdos.o \
    xterm.o xfns.o xmenu.o xselect.o xrdb.o xsmfns.o fringe.o image.o \
!   mac.o macterm.o macfns.o macmenu.o macselect.o macim.o fontset.o \
    w32.o w32bdf.o w32console.o w32fns.o w32heap.o w32inevt.o \
    w32menu.o w32proc.o w32reg.o w32select.o w32term.o w32xfns.o
  
***************
*** 1287,1292 ****
--- 1287,1296 ----
    process.h coding.h $(config_h)
  macselect.o: blockinput.h atimer.h systime.h macterm.h macgui.h frame.h \
    keymap.h $(config_h)
+ macim.o: blockinput.h atimer.h systime.h syssignal.h macterm.h macgui.h \
+   frame.h charset.h ccl.h dispextern.h fontset.h termhooks.h termopts.h \
+   termchar.h gnu.h disptab.h buffer.h window.h keyboard.h $(INTERVAL_SRC) \
+   process.h coding.h $(config_h)
  
  ${emacsapp}Contents/Resources/English.lproj:
  	mkdir -p $@
Index: src/keyboard.c
===================================================================
RCS file: /sources/emacs/emacs/src/keyboard.c,v
retrieving revision 1.899.2.11
diff -c -r1.899.2.11 keyboard.c
*** src/keyboard.c	25 Feb 2008 16:04:54 -0000	1.899.2.11
--- src/keyboard.c	4 Apr 2008 16:23:30 -0000
***************
*** 532,537 ****
--- 532,540 ----
  #if defined (WINDOWSNT) || defined (MAC_OS)
  Lisp_Object Qlanguage_change;
  #endif
+ #if defined (MAC_OSX)
+ Lisp_Object Qmac_change_input_method;
+ #endif
  Lisp_Object Qdrag_n_drop;
  Lisp_Object Qsave_session;
  #ifdef MAC_OS
***************
*** 4163,4168 ****
--- 4166,4180 ----
  	  kbd_fetch_ptr = event + 1;
  	}
  #endif
+ #if defined (MAC_OSX)
+       else if (event->kind == MAC_CHANGE_INPUT_METHOD_EVENT)
+ 	{
+ 	  /* Make an event (mac-change-input-method (KEY_SCRIPT)).  */
+ 	  obj = Fcons (make_number (event->code), Qnil);
+ 	  obj = Fcons (Qmac_change_input_method, Fcons (obj, Qnil));
+ 	  kbd_fetch_ptr = event + 1;
+ 	}
+ #endif
        else if (event->kind == SAVE_SESSION_EVENT)
          {
            obj = Fcons (Qsave_session, Qnil);
***************
*** 11214,11219 ****
--- 11226,11235 ----
    Qlanguage_change = intern ("language-change");
    staticpro (&Qlanguage_change);
  #endif
+ #if defined (MAC_OSX)
+   Qmac_change_input_method = intern ("mac-change-input-method");
+   staticpro (&Qmac_change_input_method);
+ #endif
    Qdrag_n_drop = intern ("drag-n-drop");
    staticpro (&Qdrag_n_drop);
  
Index: src/macterm.c
===================================================================
RCS file: /sources/emacs/emacs/src/macterm.c,v
retrieving revision 1.214.2.16
diff -c -r1.214.2.16 macterm.c
*** src/macterm.c	29 Mar 2008 00:46:51 -0000	1.214.2.16
--- src/macterm.c	4 Apr 2008 16:23:30 -0000
***************
*** 12310,12316 ****
  #if TARGET_API_MAC_CARBON
  	    if (!(mapped_modifiers
  		  & ~(mac_pass_command_to_system ? cmdKey : 0)
! 		  & ~(mac_pass_control_to_system ? controlKey : 0)))
  	      goto OTHER;
  	    else
  #endif
--- 12310,12318 ----
  #if TARGET_API_MAC_CARBON
  	    if (!(mapped_modifiers
  		  & ~(mac_pass_command_to_system ? cmdKey : 0)
!  		  & ~(mac_pass_control_to_system ? controlKey : 0))
!  		&& mac_pass_key_to_system (er.message & charCodeMask,
!  					   modifiers))
  	      goto OTHER;
  	    else
  #endif
***************
*** 12371,12376 ****
--- 12373,12379 ----
  	    }
  	  count++;
  	}
+       count += mac_store_change_input_method_event (timestamp);
      }
  
    /* If the focus was just given to an autoraising frame,
***************
*** 12713,12718 ****
--- 12716,12723 ----
  
    NewTSMDocument (sizeof (types) / sizeof (types[0]), types,
  		  &tsm_document_id, 0);
+ 
+   init_input_method();
  }
  #endif
  
Index: src/termhooks.h
===================================================================
RCS file: /sources/emacs/emacs/src/termhooks.h,v
retrieving revision 1.76.2.4
diff -c -r1.76.2.4 termhooks.h
*** src/termhooks.h	8 Jan 2008 04:29:50 -0000	1.76.2.4
--- src/termhooks.h	4 Apr 2008 16:23:30 -0000
***************
*** 265,270 ****
--- 265,274 ----
  				   language is changed by the
  				   user.  */
  #endif
+ #if defined (MAC_OSX)
+   MAC_CHANGE_INPUT_METHOD_EVENT,/* A MAC_CHANGE_INPUT_METHOD_EVENT is generated
+ 				   for changing input method on MacOSX. */  
+ #endif
    SCROLL_BAR_CLICK_EVENT,	/* .code gives the number of the mouse button
  				   that was clicked.
  				   .modifiers holds the state of the modifier
