Index: lisp/bindings.el
===================================================================
RCS file: /cvsroot/emacs/emacs/lisp/bindings.el,v
retrieving revision 1.154
diff -c -r1.154 bindings.el
*** lisp/bindings.el	28 Oct 2005 16:19:16 -0000	1.154
--- lisp/bindings.el	21 Nov 2005 18:32:38 -0000
***************
*** 281,286 ****
--- 281,289 ----
      map) "\
  Keymap to display on minor modes.")
  
+ (defvar command-line-processed nil)
+ (defvar before-init-hook nil)
+ (eval-at-startup ;; because of window-system
  (let* ((help-echo
  	;; The multi-line message doesn't work terribly well on the
  	;; bottom mode line...  Better ideas?
***************
*** 288,298 ****
  	;; mouse-1: select window, mouse-2: delete others, mouse-3: delete,
  	;; drag-mouse-1: resize, C-mouse-2: split horizontally"
  	"mouse-1: select (drag to resize), mouse-2: delete others, mouse-3: delete this")
!        (dashes (propertize "--" 'help-echo help-echo)))
    (setq-default mode-line-format
      (list
       "%e"
!      (propertize "-" 'help-echo help-echo)
       'mode-line-mule-info
       'mode-line-modified
       'mode-line-frame-identification
--- 289,302 ----
  	;; mouse-1: select window, mouse-2: delete others, mouse-3: delete,
  	;; drag-mouse-1: resize, C-mouse-2: split horizontally"
  	"mouse-1: select (drag to resize), mouse-2: delete others, mouse-3: delete this")
!        (lotsofdashes (if window-system (make-string 100 32) "%-"))
!        (dash (propertize (if window-system " " "-") 'help-echo help-echo))
!        (dashes (propertize (if window-system "  " "--") 'help-echo help-echo)))
! 
    (setq-default mode-line-format
      (list
       "%e"
!      (propertize dash 'help-echo help-echo)
       'mode-line-mule-info
       'mode-line-modified
       'mode-line-frame-identification
***************
*** 304,310 ****
       'mode-line-modes
       `(which-func-mode ("" which-func-format ,dashes))
       `(global-mode-string (,dashes global-mode-string))
!      (propertize "-%-" 'help-echo help-echo)))
  
    (setq-default mode-line-modes
      (list
--- 308,314 ----
       'mode-line-modes
       `(which-func-mode ("" which-func-format ,dashes))
       `(global-mode-string (,dashes global-mode-string))
!      (propertize (concat dash lotsofdashes) 'help-echo help-echo)))
  
    (setq-default mode-line-modes
      (list
***************
*** 322,329 ****
  		 'mouse-face 'mode-line-highlight
  		 'local-map (make-mode-line-mouse-map
  			     'mouse-2 #'mode-line-widen))
!      (propertize ")%]--" 'help-echo help-echo)))
! 
    (setq-default mode-line-position
      `((-3 ,(propertize "%p" 'help-echo help-echo))
        (size-indication-mode
--- 326,332 ----
  		 'mouse-face 'mode-line-highlight
  		 'local-map (make-mode-line-mouse-map
  			     'mouse-2 #'mode-line-widen))
!      (propertize (concat ")%]" dashes) 'help-echo help-echo)))
    (setq-default mode-line-position
      `((-3 ,(propertize "%p" 'help-echo help-echo))
        (size-indication-mode
***************
*** 333,339 ****
  	 (10 ,(propertize " (%l,%c)" 'help-echo help-echo))
  	 (6 ,(propertize " L%l" 'help-echo help-echo))))
         ((column-number-mode
! 	 (5 ,(propertize " C%c" 'help-echo help-echo))))))))
  
  (defvar mode-line-buffer-identification-keymap nil "\
  Keymap for what is displayed by `mode-line-buffer-identification'.")
--- 336,342 ----
  	 (10 ,(propertize " (%l,%c)" 'help-echo help-echo))
  	 (6 ,(propertize " L%l" 'help-echo help-echo))))
         ((column-number-mode
! 	 (5 ,(propertize " C%c" 'help-echo help-echo)))))))))
  
  (defvar mode-line-buffer-identification-keymap nil "\
  Keymap for what is displayed by `mode-line-buffer-identification'.")
