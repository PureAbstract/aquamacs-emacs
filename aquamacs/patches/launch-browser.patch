Index: src/mac.c
===================================================================
RCS file: /sources/emacs/emacs/src/mac.c,v
retrieving revision 1.54
diff -c -r1.54 mac.c
*** src/mac.c	6 Feb 2006 15:23:21 -0000	1.54
--- src/mac.c	9 Feb 2006 08:34:49 -0000
***************
*** 4676,4683 ****
    mac_clear_font_name_table ();
    return Qnil;
  }
! 
! 
  static Lisp_Object
  mac_get_system_locale ()
  {
--- 4676,4683 ----
    mac_clear_font_name_table ();
    return Qnil;
  }
!  
!  
  static Lisp_Object
  mac_get_system_locale ()
  {
***************
*** 4699,4704 ****
--- 4699,4809 ----
      return Qnil;
  }
  
+ DEFUN ("mac-launch-URL-with-default-browser", Fmac_launch_url_with_default_browser, Smac_launch_url_with_default_browser, 1, 1, 0,
+        doc: /* Launch the URL with the system's default browser. 
+ Return non-nil if the URL has been successfully launched.*/)
+      (URLstring)
+      Lisp_Object URLstring;
+ {
+   check_mac();
+   CHECK_STRING (URLstring);
+   if (NILP (URLstring))
+     {
+       error ("URL is nil.");
+       return Qnil;
+     }
+ 
+   BLOCK_INPUT;
+   // get default browser
+ 	 
+ 
+  
+   LSLaunchURLSpec spec;
+   OSStatus status;
+  
+   if (strncmp("file://", SDATA(URLstring), 7) == 0)
+     {
+       /* Build URL to find out what the default handler for http is.
+ 	 Without an explicit application reference, the launch function
+ 	 (e.g. LSOpenFromURLSpec or ICLaunchURL) will determine the
+ 	 default file handler for the file, which is not neccessarily the
+ 	 default browser.*/
+ 	
+       FSRef appRef;  // will be discarded
+       char* urlStr = "http://www.gnu.org/"; // just a test URL
+       CFStringRef inURLCfs = CFStringCreateWithCString(NULL, urlStr,	
+ 						       kCFStringEncodingASCII);
+       CFURLRef inURLRef = CFURLCreateWithString(NULL, inURLCfs, NULL);
+ 	
+       /* Get application for opening html pages */
+       status = LSGetApplicationForURL(inURLRef, kLSRolesAll, &appRef,
+ 				      &spec.appURL);
+       CFRelease(inURLRef);
+       CFRelease(inURLCfs);
+     } else
+     {
+       spec.appURL = NULL; /* use preferred application */
+       status = noErr;
+     }
+   if (status == noErr) 
+     {
+       /* Open the file / http with the http handler */
+       CFStringRef targetUrlCfs = 
+ 	CFStringCreateWithCString(NULL, SDATA(URLstring),
+ 				  kCFStringEncodingASCII);
+ 
+       /* CFStringRef targetUrlCfsEscaped = 
+ 	CFURLCreateStringByAddingPercentEscapes(NULL, targetUrlCfs, 
+ 						NULL, NULL, 
+ 						kCFStringEncodingUTF8);
+         the URL must already be encoded. */
+       CFURLRef targetUrlRef = 
+ 	CFURLCreateWithString(NULL, targetUrlCfs, NULL);
+ 	
+       if (targetUrlRef) 
+ 	{
+ 	
+ 	  if ( (spec.itemURLs = 
+ 		CFArrayCreate(NULL, (const void **)&targetUrlRef, 1, 
+ 			      &kCFTypeArrayCallBacks)) == NULL)
+ 	    {
+ 	      return Qnil;
+ 	    }
+ 	  spec.passThruParams = NULL;
+ 	  spec.launchFlags = kLSLaunchDefaults;
+ 	  spec.asyncRefCon = NULL;
+ 	  status = LSOpenFromURLSpec(&spec, NULL);
+ 		
+ 	  CFRelease(spec.itemURLs);
+ 	  CFRelease(targetUrlRef);
+ 	}
+       CFRelease(targetUrlCfs);
+       /* CFRelease(targetUrlCfsEscaped); */
+       UNBLOCK_INPUT;
+ 
+       if (! targetUrlRef) 
+ 	{
+ 	  error ("Could not produce valid URL from string.");
+ 	  return Qnil;
+ 	}
+       if (status != noErr) 
+ 	{
+ 	  error ("Failed to launch default browser. Error %d", XINT(status));
+ 	  return Qnil;
+ 	}
+     } 
+   else
+     {
+       UNBLOCK_INPUT;
+       error ("Could not determine default browser. Error %d", XINT(status));
+       return Qnil;
+     }
+ 
+ 
+   return Qt;
+ }
+ 
+ 
  
  #ifdef MAC_OSX
  #undef select
***************
*** 5148,5154 ****
    defsubr (&Smac_code_convert_string);
  #endif
    defsubr (&Smac_clear_font_name_table);
! 
    defsubr (&Smac_set_file_creator);
    defsubr (&Smac_set_file_type);
    defsubr (&Smac_get_file_creator);
--- 5253,5260 ----
    defsubr (&Smac_code_convert_string);
  #endif
    defsubr (&Smac_clear_font_name_table);
!   
!   defsubr (&Smac_launch_url_with_default_browser);
    defsubr (&Smac_set_file_creator);
    defsubr (&Smac_set_file_type);
    defsubr (&Smac_get_file_creator);
Index: lisp/net/browse-url.el
===================================================================
RCS file: /sources/emacs/emacs/lisp/net/browse-url.el,v
retrieving revision 1.52
diff -c -r1.52 browse-url.el
*** lisp/net/browse-url.el	19 Nov 2005 15:57:19 -0000	1.52
--- lisp/net/browse-url.el	9 Feb 2006 08:34:51 -0000
***************
*** 811,818 ****
      (w32-shell-execute "open" url)))
  
  (defun browse-url-default-macosx-browser (url &optional new-window)
    (interactive (browse-url-interactive-arg "URL: "))
!   (start-process (concat "open " url) nil "open" url))
  
  ;; --- Netscape ---
  
--- 811,825 ----
      (w32-shell-execute "open" url)))
  
  (defun browse-url-default-macosx-browser (url &optional new-window)
+ "Launch the default browser specified in Mac OS X.
+ NEW-WINDOW is ignored."
    (interactive (browse-url-interactive-arg "URL: "))
!   (condition-case nil
!       (mac-launch-URL-with-default-browser url)
!     (error 
!      ;; fallback - sometimes http is not registered in the
!      ;; LaunchServices database
!      (start-process (concat "open " url) nil "open" url))))
  
  ;; --- Netscape ---
  
