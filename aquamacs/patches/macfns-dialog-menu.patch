the first patch ensures that redisplay is done before the dialog is constructed so that no implicit
EVAL's destroy the strings.

*** src/macmenu.c	30 Aug 2008 00:10:18 -0400	1.56.2.7
--- src/macmenu.c	09 Feb 2009 13:21:20 -0500	
***************
*** 1882,1888 ****
        return Qnil;
      }
  
!   /* Create a tree of widget_value objects
       representing the text label and buttons.  */
    {
      Lisp_Object pane_name, prefix;
--- 1882,1893 ----
        return Qnil;
      }
  
!   /* Force a redisplay before showing the dialog.  If a frame is created
!      just before showing the dialog, its contents may not have been fully
!      drawn.  */
!   Fredisplay (Qt);
! 
!  /* Create a tree of widget_value objects
       representing the text label and buttons.  */
    {
      Lisp_Object pane_name, prefix;
***************
*** 1985,1994 ****
    /* No selection has been chosen yet.  */
    menu_item_selection = 0;
  
-   /* Force a redisplay before showing the dialog.  If a frame is created
-      just before showing the dialog, its contents may not have been fully
-      drawn.  */
-   Fredisplay (Qt);
  
    /* Actually create the dialog.  */
  #if TARGET_API_MAC_CARBON
--- 1990,1995 ----
*** lisp/files.el	5 Aug 2008 21:44:43 -0000	1.896.2.42
--- lisp/files.el	9 Feb 2009 14:58:09 -0000
***************
*** 3869,3883 ****
    nil)
  
  (defvar save-some-buffers-action-alist
!   '((?\C-r
!      (lambda (buf)
!        (view-buffer buf
! 		    (lambda (ignore)
! 		      (exit-recursive-edit)))
!        (recursive-edit)
!        ;; Return nil to ask about BUF again.
!        nil)
!      "view this buffer")
      (?d (lambda (buf)
  	  (save-window-excursion
  	    (diff-buffer-with-file buf))
--- 3900,3914 ----
    nil)
  
  (defvar save-some-buffers-action-alist
!   '(;; (?\C-r
! ;;      (lambda (buf)
! ;;        (view-buffer buf
! ;; 		    (lambda (ignore)
! ;; 		      (exit-recursive-edit)))
! ;;        (recursive-edit)
! ;;        ;; Return nil to ask about BUF again.
! ;;        nil)
! ;;      "view this buffer")
      (?d (lambda (buf)
  	  (save-window-excursion
  	    (diff-buffer-with-file buf))
***************
*** 3911,3917 ****
    (save-window-excursion
      (let* (queried some-automatic
  	   files-done abbrevs-done)
!       (dolist (buffer (buffer-list))
  	;; First save any buffers that we're supposed to save unconditionally.
  	;; That way the following code won't ask about them.
  	(with-current-buffer buffer
--- 3942,3948 ----
    (save-window-excursion
      (let* (queried some-automatic
  	   files-done abbrevs-done)
!       (dolist (buffer (buffer-list   ))
  	;; First save any buffers that we're supposed to save unconditionally.
  	;; That way the following code won't ask about them.
  	(with-current-buffer buffer
***************
*** 3937,3942 ****
--- 3968,3981 ----
  		     (if arg
  			 t
  		       (setq queried t)
+ 		       (with-current-buffer buffer
+ 			 (with-selected-window (get-window-for-other-buffer)
+ 			   (if (and (boundp 'tabbar-mode) tabbar-mode)
+ 			       (switch-to-buffer-in-tab buffer)
+ 			     (switch-to-buffer buffer))
+ 			   (select-frame-set-input-focus (window-frame (selected-window)))
+ 			   (if (fboundp 'smart-move-minibuffer-inside-screen)
+ 			       (smart-move-minibuffer-inside-screen))))
  		       (if (buffer-file-name buffer)
  			   (format "Save file %s? "
  				   (buffer-file-name buffer))
*** lisp/emacs-lisp/map-ynp.el	06 Jan 2008 20:07:39 -0500	1.10.2.2
--- lisp/emacs-lisp/map-ynp.el	09 Feb 2009 00:18:00 -0500	
***************
*** 82,88 ****
  	 user-keys mouse-event map prompt char elt tail def
  	 ;; Non-nil means we should use mouse menus to ask.
  	 use-menus
- 	 delayed-switch-frame
  	 (next (if (or (and list (symbolp list))
  		       (subrp list)
  		       (byte-code-function-p list)
--- 82,87 ----
***************
*** 103,124 ****
  	(let ((object (if help (capitalize (nth 0 help))))
  	      (objects (if help (capitalize (nth 1 help))))
  	      (action (if help (capitalize (nth 2 help)))))
! 	  (setq map `(("Yes" . act) ("No" . skip)
  		      ,@(mapcar (lambda (elt)
  				  (cons (with-syntax-table
  					    text-mode-syntax-table
  					  (capitalize (nth 2 elt)))
  					(vector (nth 1 elt))))
  				action-alist)
! 		      (,(if help (concat action " This But No More")
! 			  "Do This But No More") . act-and-exit)
! 		      (,(if help (concat action " All " objects)
! 			  "Do All") . automatic)
! 		      ("No For All" . exit))
  		use-menus t
  		mouse-event last-nonmenu-event))
        (setq user-keys (if action-alist
! 			  (concat (mapconcat (function
  					      (lambda (elt)
  						(key-description
  						 (char-to-string (car elt)))))
--- 102,127 ----
  	(let ((object (if help (capitalize (nth 0 help))))
  	      (objects (if help (capitalize (nth 1 help))))
  	      (action (if help (capitalize (nth 2 help)))))
! 	  (setq map `(("Yes" . act) 
! 		      (,(if help (concat action " All " objects)
! 			  "Do All") . automatic) 
! 		      ;; (,(if help (concat action " This But No More")
! 		      ;; "Do This But No More") . act-and-exit)
! 		      ("No" . skip)
! 		      ("No For All" . exit)
  		      ,@(mapcar (lambda (elt)
  				  (cons (with-syntax-table
  					    text-mode-syntax-table
  					  (capitalize (nth 2 elt)))
  					(vector (nth 1 elt))))
  				action-alist)
! 		      nil
! 		      ("Cancel" . quit)
! 		     )
  		use-menus t
  		mouse-event last-nonmenu-event))
        (setq user-keys (if action-alist
! 			  (concat (mapconcat (function  
  					      (lambda (elt)
  						(key-description
  						 (char-to-string (car elt)))))
***************
*** 142,148 ****
  	    (cond ((stringp prompt)
  		   ;; Prompt the user about this object.
  		   (setq quit-flag nil)
! 		   (if use-menus
  		       (setq def (or (x-popup-dialog (or mouse-event use-menus)
  						     (cons prompt map))
  				     'quit))
--- 145,151 ----
  	    (cond ((stringp prompt)
  		   ;; Prompt the user about this object.
  		   (setq quit-flag nil)
!   		   (if use-menus
  		       (setq def (or (x-popup-dialog (or mouse-event use-menus)
  						     (cons prompt map))
  				     'quit))
***************
*** 166,171 ****
--- 169,175 ----
  				(key-description (vector help-char))
  				(single-key-description char)))
  		     (setq def (lookup-key map (vector char))))
+ 
  		   (cond ((eq def 'exit)
  			  (setq next (function (lambda () nil))))
  			 ((eq def 'act)
***************
*** 239,250 ****
  					 (setq next ',next)
  					 ',elt))))
  			 ((and (consp char)
! 			       (eq (car char) 'switch-frame))
! 			  ;; switch-frame event.  Put it off until we're done.
! 			  (setq delayed-switch-frame char)
  			  (setq next `(lambda ()
  				       (setq next ',next)
! 				       ',elt)))
  			 (t
  			  ;; Random char.
  			  (message "Type %s for help."
--- 243,254 ----
  					 (setq next ',next)
  					 ',elt))))
  			 ((and (consp char)
! 				   (eq (car char) 'switch-frame))
! 			  (handle-switch-frame char)
  			  (setq next `(lambda ()
  				       (setq next ',next)
! 				       ',elt))
! 			  )
  			 (t
  			  ;; Random char.
  			  (message "Type %s for help."
***************
*** 256,265 ****
  				       ',elt)))))
  		  (prompt
  		   (funcall actor elt)
! 		   (setq actions (1+ actions))))))
!       (if delayed-switch-frame
! 	  (setq unread-command-events
! 		(cons delayed-switch-frame unread-command-events))))
      ;; Clear the last prompt from the minibuffer.
      (let ((message-log-max nil))
        (message ""))
--- 260,266 ----
  				       ',elt)))))
  		  (prompt
  		   (funcall actor elt)
! 		   (setq actions (1+ actions)))))))
      ;; Clear the last prompt from the minibuffer.
      (let ((message-log-max nil))
        (message ""))
Index: src/macfns.c
===================================================================
RCS file: /cvsroot/emacs/emacs/src/macfns.c,v
retrieving revision 1.70
diff -c -r1.70 macfns.c
*** src/macfns.c	31 Oct 2005 08:36:55 -0000	1.70
--- src/macfns.c	12 Nov 2005 16:38:31 -0000
***************
*** 91,96 ****
--- 91,100 ----
  Lisp_Object Qundefined_color;
  Lisp_Object Qcancel_timer;
  
+ /* Cancel button selected in mac-dialog-y-or-n-p */
+ 
+ Lisp_Object Qcancel;
+ 
  /* In dispnew.c */
  
  extern Lisp_Object Vwindow_system_version;
***************
*** 4326,4331 ****
--- 4355,4465 ----
       void *data ;
  {
  }
+ 
+ #if MAC_OSX
+ DEFUN ("mac-dialog", Fmac_dialog, Smac_dialog, 2, 2, "",
+        doc: /* Show a dialog.  */)
+   (message, explanation)
+      Lisp_Object message, explanation;
+ {
+   DialogRef 		sheet=NULL;
+   AlertStdCFStringAlertParamRec alertParams;
+   struct frame *f = XFRAME (selected_frame);
+   CHECK_STRING (message);
+   CHECK_STRING (explanation);
+  
+   if (FRAME_MAC_WINDOW (f))
+     {
+       GetStandardAlertDefaultParams(&alertParams,kStdCFStringAlertVersionOne);
+       alertParams.defaultText=(CFStringRef)kAlertDefaultOKText;	
+       alertParams.defaultButton=kAlertStdAlertOKButton;	
+ 
+       BLOCK_INPUT;
+       {
+ 	CFStringRef msgTitle = NULL, msgExplanation = NULL;
+ 	msgTitle       = cfstring_create_with_string (message);
+ 	msgExplanation = cfstring_create_with_string (explanation);
+ 
+ 	OSStatus err;
+ 	err = CreateStandardAlert(kAlertNoteAlert,
+ 				  msgTitle,
+ 				  msgExplanation,
+ 				  &alertParams,
+ 				  &sheet);
+ 	if(err == noErr)
+ 	  err = RunStandardAlert(sheet,
+ 				 NULL,
+ 				 NULL);
+ 	CFRelease (msgTitle);
+ 	CFRelease (msgExplanation);
+       }
+       UNBLOCK_INPUT;
+     }
+   return Qnil;
+ }
+ 
+ DEFUN ("mac-dialog-y-or-n-p", Fmac_dialog_y_or_n_p, Smac_dialog_y_or_n_p, 2, 3, "",
+        doc: /* Show a dialog, which asks user a "Yes or No" question.
+ Return t if answer is "Yes", nil if it is "No". Takes two arguments,
+ which are the strings to display to ask the question.
+ If optional third argument is non-nil, display a "Cancel" button.
+ If it is selected, returns `cancel'.*/)
+   (message, explanation, cancel_button)
+      Lisp_Object message, explanation, cancel_button;
+ {
+   DialogRef 		sheet=NULL;
+   AlertStdCFStringAlertParamRec alertParams;
+   struct frame *f = XFRAME (selected_frame);
+   CHECK_STRING (message);
+   CHECK_STRING (explanation);
+   SInt16 index = 0;
+  
+   if (FRAME_MAC_WINDOW (f))
+     {
+       GetStandardAlertDefaultParams(&alertParams,kStdCFStringAlertVersionOne);
+       alertParams.defaultText=CFSTR ("Yes");
+       alertParams.defaultButton=kAlertStdAlertOKButton;	
+       alertParams.cancelText=CFSTR ("No");
+       alertParams.cancelButton=kAlertStdAlertCancelButton;
+       if (!NILP(cancel_button)) 
+ 	{
+ 	  alertParams.otherText=CFSTR ("Cancel");
+ 	  // The cancel button is "Cancel", in that case, instead of "No"
+ 	  alertParams.cancelButton=kAlertStdAlertOtherButton;
+ 	}
+ 
+       BLOCK_INPUT;
+       {
+ 	CFStringRef msgTitle = NULL, msgExplanation = NULL;
+ 	msgTitle       = cfstring_create_with_string (message);
+ 	msgExplanation = cfstring_create_with_string (explanation);
+ 
+ 	OSStatus err;
+ 	err = CreateStandardAlert(kAlertNoteAlert,
+ 				  msgTitle,
+ 				  msgExplanation,
+ 				  &alertParams,
+ 				  &sheet);
+ 	if(err == noErr)
+ 	  err = RunStandardAlert(sheet,
+ 				 NULL,
+ 				 &index);
+ 	CFRelease (msgTitle);
+ 	CFRelease (msgExplanation);
+       }
+       UNBLOCK_INPUT;
+     }
+   if( index==kAlertStdAlertOKButton ){
+     return Qt;
+   } else if (index==kAlertStdAlertOtherButton) {
+     return Qcancel;
+   }
+   else{
+     return Qnil;
+   }
+ }
+ #endif /*MAC_OSX*/
+ 
  #endif
  
  /***********************************************************************
***************
*** 4392,4397 ****
--- 4544,4552 ----
    staticpro (&Qcancel_timer);
    /* This is the end of symbol initialization.  */
  
+   Qcancel = intern ("cancel");
+   staticpro (&Qcancel);
+ 
    /* Text property `display' should be nonsticky by default.  */
    Vtext_property_default_nonsticky
      = Fcons (Fcons (Qdisplay, Qt), Vtext_property_default_nonsticky);
***************
*** 4538,4543 ****
--- 5081,5090 ----
  #if USE_ATSUI
    defsubr (&Smac_atsu_font_face_attributes);
  #endif
+ #if TARGET_API_MAC_CARBON
+   defsubr (&Smac_dialog);
+   defsubr (&Smac_dialog_y_or_n_p);
+ #endif
  }
  
  /* arch-tag: d7591289-f374-4377-b245-12f5dbbb8edc
